pipeline {
    agent any

    stages {
        stage('Pull Source Code from GitHub') {
            steps {
                git branch: 'main', url: 'https://github.com/ASHISHKHOPADE-DEVOPS/Pass.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image with tag version v1.BUILD_ID
                    sh 'docker image build -t $JOB_NAME:v1.$BUILD_ID .'

                    // Tag the Docker image with a custom repository and version tag
                    sh 'docker image tag $JOB_NAME:v1.$BUILD_ID ashishakhopade/$JOB_NAME:v1.$BUILD_ID'

                    // Tag the Docker image with the 'latest' tag for the same repository
                    sh 'docker image tag $JOB_NAME:v1.$BUILD_ID ashishakhopade/$JOB_NAME:latest'
                }
            }
        }

        stage('Push Image To Docker Hub') {
            steps {
                script {
                    // Docker Hub credentials
                    def dockerUsername = 'ashishakhopade'
                    def dockerPassword = 'ashishkhopade'

                    // Docker login
                    sh "echo ${dockerPassword} | docker login -u ${dockerUsername} --password-stdin"

                    // Push the versioned image to Docker Hub
                    sh "docker image push ashishakhopade/$JOB_NAME:v1.$BUILD_ID"

                    // Push the latest tagged image to Docker Hub
                    sh "docker image push ashishakhopade/$JOB_NAME:latest"

                    // Remove local images to clean up disk space
                    sh "docker rmi $JOB_NAME:v1.$BUILD_ID ashishakhopade/$JOB_NAME:v1.$BUILD_ID ashishakhopade/$JOB_NAME:latest"
                }
            }
        }

        stage('Deploy to Amazon EKS') {
            steps {
                script {
                    // Set the AWS EKS cluster and namespace
                    def clusterName = 'your-eks-cluster-name'
                    def namespace = 'default' // Specify your namespace here

                    // Update the Kubernetes deployment with the new image
                    sh """
                        aws eks --region your-region update-kubeconfig --name ${clusterName}
                        kubectl set image deployment/your-deployment-name \
                        your-container-name=ashishakhopade/$JOB_NAME:v1.$BUILD_ID \
                        -n ${namespace}
                    """

                    // Ensure the deployment is updated successfully
                    sh 'kubectl rollout status deployment/your-deployment-name -n ${namespace}'
                }
            }
        }
    }
}


